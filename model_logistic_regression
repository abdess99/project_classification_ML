
from sklearn.linear_model import LogisticRegression

def create_logistic_regression(db):      #Arthur et Abdessamad
   X, y = create_datasets(db)

   clf = LogisticRegression(random_state=0)
  # split the data
   NUM_SPLITS = 5
   kf = KFold(n_splits=NUM_SPLITS, shuffle=True)
   # Train, test and compute the metrics on each split
   max=0
   for train_index, test_index in kf.split(X):
      
      X_train = X.iloc[train_index,:]
      y_train = y[train_index]
      X_test = X.iloc[test_index,:]
      y_test = y[test_index]
      clf.fit(X_train, y_train)
      # Predictions on the test set
      predictions = clf.predict(X_test)
      if max < metrics.accuracy_score(y_test, predictions):
         max = metrics.accuracy_score(y_test, predictions)
         X_train_f = X.iloc[train_index,:]
         y_train_f = y[train_index]
         X_test_f = X.iloc[test_index,:]
         y_test_f = y[test_index]
          
   predictions = clf.predict(X_test_f)
   clf.fit(X_train_f, y_train_f)
   recall = metrics.recall_score(y_test_f, predictions)
   precision=metrics.precision_score(y_test_f, predictions)
   print('precision= {}, recall= {}'.format(precision, recall))
